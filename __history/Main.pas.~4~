unit Main;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Objects;

type
  TForm1 = class(TForm)
    PaintBox1: TPaintBox;
    Button1: TButton;
    procedure PaintBox1Paint(Sender: TObject; Canvas: TCanvas);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    x:integer;
    y:integer;
  public
    { Public declarations }
  end;

  type
  TMyThread = class(TThread)
  private
    { Private declarations }
  protected
    procedure Execute; override;
    procedure Repaint;
  end;

var
  Form1: TForm1;
  t:TMyThread;

implementation

{$R *.fmx}

{ TMyThread }

procedure TMyThread.Execute;
begin
  inherited;
  Randomize;
  while True do
  begin
    Form1.x:=Random(Round(Form1.PaintBox1.Width));
    Form1.y:=Random(Round(Form1.PaintBox1.Height));
    Synchronize(Repaint);
  end;

end;

procedure TMyThread.Repaint;
begin
  Form1.PaintBox1.Repaint;
  TThread.Sleep(30);
end;



procedure TForm1.Button1Click(Sender: TObject);
begin
t:=TMyThread.Create(false);
end;

procedure TForm1.PaintBox1Paint(Sender: TObject; Canvas: TCanvas);
var PixelPos:TPointF;  PixelRegion:TRectF;
begin
  PaintBox1.Canvas.Stroke.Color:=TAlphaColors.Coral;
  PaintBox1.Canvas.Stroke.Dash:=TStrokeDash.Solid;
  PaintBox1.Canvas.Stroke.Thickness:=4;
  PaintBox1.Canvas.BeginScene();
  PixelPos:=PaintBox1.Canvas.AlignToPixel(TPointF.Create(x,y));
  PixelRegion:=TRectF.Create(PixelPos,1,1);
  PaintBox1.Canvas.DrawRect(PixelRegion,0,0,AllCorners,1);
  PaintBox1.Canvas.EndScene;

end;

end.
